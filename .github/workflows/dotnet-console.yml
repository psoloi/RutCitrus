# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET 8 Console RCM

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-publish:
    name: Build & Publish (Windows)
    runs-on: windows-latest
    outputs:
      release_tag: ${{ steps.create-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./RutCitrusManager/RutCitrusManager.csproj

      - name: Build
        run: dotnet build ./RutCitrusManager/RutCitrusManager.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./RutCitrusManager/RutCitrusManager.csproj --configuration Release --no-build --verbosity normal

      - name: Publish Application
        run: |
          dotnet publish `
            ./RutCitrusManager/RutCitrusManager.csproj `
            -c Release `
            -o ./publish/win-x64 `
            --self-contained true `
            -r win-x64

      # 打包为 ZIP（保留原始文件结构）
      - name: Create ZIP Package
        run: |
          $zipName = "rcm-win-x64.zip"
          Compress-Archive -Path "./publish/win-x64/*" -DestinationPath $zipName
          echo "ZIP_PATH=$zipName" >> $env:GITHUB_ENV

      # 上传 ZIP 到 Actions Artifacts
      - name: Upload ZIP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rcm-win-x64
          path: ${{ env.ZIP_PATH }}

      # 生成唯一标签
      - name: Generate and push tag
        id: create-tag
        run: |
          $commitSha = git rev-parse --short HEAD
          $dateStr = Get-Date -Format "yyyyMMdd-HHmmss"
          $tagName = "release-$dateStr-$commitSha"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag $tagName
          git push origin $tagName
          echo "tag=$tagName" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write
    steps:
      # 下载 ZIP 文件（从 Artifacts）
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: rcm-win-x64
          path: ./artifacts

      # 创建 Release 并上传 ZIP 到 Assets
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-publish.outputs.release_tag }}
          name: "Release ${{ needs.build-and-publish.outputs.release_tag }}"
          body: |
            # 🚀 自动生成的 Release
            此 Release 并非手动创建,其为测试版本通常已经完成测试,如果有Bug请及时帮忙提出
          files: |
            artifacts/rcm-win-x64.zip  # 明确指定 ZIP 文件路径
