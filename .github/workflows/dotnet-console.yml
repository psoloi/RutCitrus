# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET 8 Console RCM

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-publish:
    name: Build & Publish (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./RutCitrusManager/RutCitrusManager.csproj

      - name: Build
        run: dotnet build ./RutCitrusManager/RutCitrusManager.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test ./RutCitrusManager/RutCitrusManager.csproj --configuration Release --no-build --verbosity normal

      - name: Publish Application
        run: |  # 关键修正点：使用正确的PowerShell多行命令格式
          dotnet publish `
            ./RutCitrusManager/RutCitrusManager.csproj `
            -c Release `
            -o ./publish/win-x64 `
            --self-contained false `
            --runtime win-x64 `  # 使用完整参数名避免歧义
            /p:DebugType=None `
            /p:DebugSymbols=false

      - name: Verify EXE File
        run: |
          $exePath = "./publish/win-x64/RutCitrusManager.exe"
          if (-not (Test-Path $exePath)) {
              Write-Error "EXE文件未生成: $exePath"
              exit 1
          }
          Write-Output "生成的可执行文件大小："
          (Get-Item $exePath).Length / 1MB | ForEach-Object { $_.ToString("0.00") + " MB" }

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-win-x64
          path: ${{ github.workspace }}/publish/win-x64/RutCitrusManager.exe

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: |
      needs.build-and-publish.outputs.create-tag.tag_created == 'true' &&
      startsWith(needs.build-and-publish.outputs.create-tag.tag, 'release-')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: app-win-x64
          path: ./release-assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-and-publish.outputs.create-tag.tag }}
          name: Release ${{ needs.build-and-publish.outputs.create-tag.tag }}
          body: |
            🚀 自动构建版本
            - 提交哈希: ${{ github.sha }}
            - 构建时间: ${{ steps.publish.outputs.timestamp }}
          files: |
            release-assets/RutCitrusManager.exe
